module word

// NOTE: The following code was generated by "gen/gen.v word_breaktest". DO NOT EDIT.

struct TestCase {
	input    string         [required]
	expected []WordBoundary [required]
	desc     string
}

// word_break_test_cases are the word boundary break test cases.
// They are taken from https://www.unicode.org/Public/15.0.0/ucd/auxiliary/WordBreakTest.txt.
const word_break_test_cases = [
	TestCase{
		input: '\u0001\u0001'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u000D'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u000A'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u000B'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u3031'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0041'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0041'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u003A'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u002C'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u002E'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0030'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0030'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u005F'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u005F'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u05D0'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0022'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0027'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u231A'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0020'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u00AD'
		expected: [WordBoundary{
			word: '\u0001\u00AD'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0001\u0308\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0300'
		expected: [WordBoundary{
			word: '\u0001\u0300'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0001\u0308\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u200D'
		expected: [WordBoundary{
			word: '\u0001\u200D'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0001\u0308\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0001'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0001\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0001\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0001'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0001'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u000D'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u000D'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u000A'
		expected: [WordBoundary{
			word: '\u000D\u000A'
			offset_start: 0
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) × [3.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u000A'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u000B'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u000B'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u3031'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u3031'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0041'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0041'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0041'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u003A'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u003A'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u002C'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u002C'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u002E'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u002E'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0030'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0030'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0030'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u005F'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u005F'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u005F'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\U0001F1E6'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u05D0'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0022'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0022'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0027'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0027'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u231A'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u231A'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0020'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0020'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u00AD'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u00AD'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308\u00AD'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0300'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0300'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0300'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308\u0300'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u200D'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u200D'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u200D'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308\u200D'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0061\u2060'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0061\u003A'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0061\u0027'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0061\u002C'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0031\u003A'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0031\u0027'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0031\u002C'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u000D'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0001'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0001'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u000D'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u000D'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u000A'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u000A'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u000B'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u000B'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u3031'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u3031'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0041'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0041'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0041'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u003A'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u003A'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u002C'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u002C'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u002E'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u002E'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0030'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0030'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0030'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u005F'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u005F'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u005F'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\U0001F1E6'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u05D0'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0022'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0022'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0027'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0027'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u231A'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u231A'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0020'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0020'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u00AD'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u00AD'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308\u00AD'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0300'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0300'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0300'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308\u0300'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u200D'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u200D'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u200D'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308\u200D'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0061\u2060'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0061\u003A'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0061\u0027'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0061\u002C'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0031\u003A'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0031\u0027'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0031\u002C'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000A\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u000A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0001'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0001'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u000D'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u000D'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u000A'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u000A'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u000B'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u000B'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u3031'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u3031'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0041'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0041'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0041'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u003A'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u003A'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u002C'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u002C'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u002E'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u002E'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0030'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0030'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0030'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u005F'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u005F'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u005F'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\U0001F1E6'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u05D0'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0022'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0022'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0027'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0027'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u231A'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u231A'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0020'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0020'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u00AD'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u00AD'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308\u00AD'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0300'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0300'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0300'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308\u0300'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u200D'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u200D'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u200D'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308\u200D'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0061\u2060'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0061\u003A'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0061\u0027'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0061\u002C'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0031\u003A'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0031\u0027'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0031\u002C'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000B\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u000B'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0308'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0001'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0001'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0001'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u000D'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u000D'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u000D'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u000A'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u000A'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u000A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u000B'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u000B'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u000B'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u3031'
		expected: [WordBoundary{
			word: '\u3031\u3031'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [13.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u3031'
		expected: [WordBoundary{
			word: '\u3031\u0308\u3031'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0041'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0041'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0041'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u003A'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u003A'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u002C'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u002C'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u002E'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u002E'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002E'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0030'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0030'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0030'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u005F'
		expected: [WordBoundary{
			word: '\u3031\u005F'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u005F'
		expected: [WordBoundary{
			word: '\u3031\u0308\u005F'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\U0001F1E6'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u05D0'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 5
			offset_end: 7
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0022'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0022'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0022'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0027'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0027'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u231A'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u231A'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u231A'
			offset_start: 5
			offset_end: 8
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0020'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0020'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0020'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u00AD'
		expected: [WordBoundary{
			word: '\u3031\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u3031\u0308\u00AD'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0300'
		expected: [WordBoundary{
			word: '\u3031\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0300'
		expected: [WordBoundary{
			word: '\u3031\u0308\u0300'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u200D'
		expected: [WordBoundary{
			word: '\u3031\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u200D'
		expected: [WordBoundary{
			word: '\u3031\u0308\u200D'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0061\u2060'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0061\u003A'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0061\u0027'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0061\u002C'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0031\u003A'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0031\u0027'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0031\u002C'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u3031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u3031\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0001'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u000D'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u000A'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u000B'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u3031'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0041'
		expected: [WordBoundary{
			word: '\u0041\u0041'
			offset_start: 0
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0041'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u003A'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u002C'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u002E'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0030'
		expected: [WordBoundary{
			word: '\u0041\u0030'
			offset_start: 0
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0030'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u005F'
		expected: [WordBoundary{
			word: '\u0041\u005F'
			offset_start: 0
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0041\u0308\u005F'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u05D0'
		expected: [WordBoundary{
			word: '\u0041\u05D0'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0041\u0308\u05D0'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0022'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0027'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u231A'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0020'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0041\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u00AD'
		expected: [WordBoundary{
			word: '\u0041\u00AD'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0041\u0308\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0300'
		expected: [WordBoundary{
			word: '\u0041\u0300'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u200D'
		expected: [WordBoundary{
			word: '\u0041\u200D'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0041\u0308\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0041\u0061\u2060'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0061\u2060'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0041\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0041\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0041\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0041\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0041\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0041\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0041\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0041\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0041\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0001'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0001'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u000D'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u000D'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u000A'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u000A'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u000B'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u000B'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u3031'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u3031'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0041'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0041'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0041'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u003A'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u003A'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u002C'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u002C'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u002E'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u002E'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0030'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0030'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0030'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u005F'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u005F'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u005F'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\U0001F1E6'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u05D0'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0022'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0022'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0027'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0027'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u231A'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u231A'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0020'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0020'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u00AD'
		expected: [WordBoundary{
			word: '\u003A\u00AD'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u003A\u0308\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0300'
		expected: [WordBoundary{
			word: '\u003A\u0300'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0300'
		expected: [WordBoundary{
			word: '\u003A\u0308\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u200D'
		expected: [WordBoundary{
			word: '\u003A\u200D'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u200D'
		expected: [WordBoundary{
			word: '\u003A\u0308\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0061\u2060'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0061\u003A'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0061\u0027'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0061\u002C'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0031\u003A'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0031\u0027'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0031\u002C'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u003A'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u003A\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u003A\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0001'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0001'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u000D'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u000D'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u000A'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u000A'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u000B'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u000B'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u3031'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u3031'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0041'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0041'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0041'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u003A'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u003A'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u002C'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u002C'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u002E'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u002E'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0030'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0030'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0030'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u005F'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u005F'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u005F'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\U0001F1E6'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u05D0'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0022'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0022'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0027'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0027'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u231A'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u231A'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0020'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0020'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u00AD'
		expected: [WordBoundary{
			word: '\u002C\u00AD'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u002C\u0308\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0300'
		expected: [WordBoundary{
			word: '\u002C\u0300'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0300'
		expected: [WordBoundary{
			word: '\u002C\u0308\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u200D'
		expected: [WordBoundary{
			word: '\u002C\u200D'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u200D'
		expected: [WordBoundary{
			word: '\u002C\u0308\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0061\u2060'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0061\u003A'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0061\u0027'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0061\u002C'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0031\u003A'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0031\u0027'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0031\u002C'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u002C'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002C\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u002C\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0001'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0001'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u000D'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u000D'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u000A'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u000A'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u000B'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u000B'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u3031'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u3031'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0041'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0041'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0041'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u003A'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u003A'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u002C'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u002C'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u002E'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u002E'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0030'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0030'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0030'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u005F'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u005F'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u005F'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\U0001F1E6'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u05D0'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0022'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0022'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0027'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0027'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u231A'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u231A'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0020'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0020'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u00AD'
		expected: [WordBoundary{
			word: '\u002E\u00AD'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u002E\u0308\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0300'
		expected: [WordBoundary{
			word: '\u002E\u0300'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0300'
		expected: [WordBoundary{
			word: '\u002E\u0308\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u200D'
		expected: [WordBoundary{
			word: '\u002E\u200D'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u200D'
		expected: [WordBoundary{
			word: '\u002E\u0308\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0061\u2060'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0061\u003A'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0061\u0027'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0061\u002C'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0031\u003A'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0031\u0027'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0031\u002C'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u002E'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u002E\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u002E\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0001'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u000D'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u000A'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u000B'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u3031'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0041'
		expected: [WordBoundary{
			word: '\u0030\u0041'
			offset_start: 0
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [10.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0041'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u003A'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u002C'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u002E'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0030'
		expected: [WordBoundary{
			word: '\u0030\u0030'
			offset_start: 0
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [8.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0030'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [8.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u005F'
		expected: [WordBoundary{
			word: '\u0030\u005F'
			offset_start: 0
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0030\u0308\u005F'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u05D0'
		expected: [WordBoundary{
			word: '\u0030\u05D0'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [10.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0030\u0308\u05D0'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0022'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0027'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u231A'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0020'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0030\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u00AD'
		expected: [WordBoundary{
			word: '\u0030\u00AD'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0030\u0308\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0300'
		expected: [WordBoundary{
			word: '\u0030\u0300'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u200D'
		expected: [WordBoundary{
			word: '\u0030\u200D'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0030\u0308\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0030\u0061\u2060'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [10.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0061\u2060'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0030\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0030\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0030\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0030\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [10.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0030\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0030\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0030\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0030\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0030\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [4.0] COMBINING DIAERESIS (Extend_FE) × [8.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0001'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0001'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u000D'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u000D'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u000A'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u000A'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u000B'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u000B'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u3031'
		expected: [WordBoundary{
			word: '\u005F\u3031'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u3031'
		expected: [WordBoundary{
			word: '\u005F\u0308\u3031'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0041'
		expected: [WordBoundary{
			word: '\u005F\u0041'
			offset_start: 0
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0041'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0041'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u003A'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u003A'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u002C'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u002C'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u002E'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u002E'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0030'
		expected: [WordBoundary{
			word: '\u005F\u0030'
			offset_start: 0
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0030'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0030'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u005F'
		expected: [WordBoundary{
			word: '\u005F\u005F'
			offset_start: 0
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u005F'
		expected: [WordBoundary{
			word: '\u005F\u0308\u005F'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\U0001F1E6'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u05D0'
		expected: [WordBoundary{
			word: '\u005F\u05D0'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u005F\u0308\u05D0'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0022'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0022'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0027'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0027'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u231A'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u231A'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0020'
		expected: [WordBoundary{
			word: '\u005F'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0020'
		expected: [WordBoundary{
			word: '\u005F\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u00AD'
		expected: [WordBoundary{
			word: '\u005F\u00AD'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u005F\u0308\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0300'
		expected: [WordBoundary{
			word: '\u005F\u0300'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0300'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u200D'
		expected: [WordBoundary{
			word: '\u005F\u200D'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u200D'
		expected: [WordBoundary{
			word: '\u005F\u0308\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0061\u2060'
		expected: [WordBoundary{
			word: '\u005F\u0061\u2060'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0061\u2060'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0061\u003A'
		expected: [WordBoundary{
			word: '\u005F\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0061\u0027'
		expected: [WordBoundary{
			word: '\u005F\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u005F\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0061\u002C'
		expected: [WordBoundary{
			word: '\u005F\u0061'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0061'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0031\u003A'
		expected: [WordBoundary{
			word: '\u005F\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0031\u0027'
		expected: [WordBoundary{
			word: '\u005F\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0031\u002C'
		expected: [WordBoundary{
			word: '\u005F\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u005F\u0031'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u005F\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u005F\u0308\u0031'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0001'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0001'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0001'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0001'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u000D'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000D'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u000D'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u000D'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u000A'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u000A'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u000A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u000B'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000B'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u000B'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u000B'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u3031'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u3031'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u3031'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u3031'
			offset_start: 6
			offset_end: 9
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0041'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0041'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0041'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0041'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u003A'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u003A'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u002C'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u002C'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u002E'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u002E'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u002E'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0030'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0030'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0030'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0030'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u005F'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u005F'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u005F'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u005F'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\U0001F1E6'
		expected: [WordBoundary{
			word: '\U0001F1E6\U0001F1E6'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [15.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308\U0001F1E6'
			offset_start: 0
			offset_end: 10
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) × [15.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u05D0'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 4
			offset_end: 6
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u05D0'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 6
			offset_end: 8
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0022'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0022'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0022'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0022'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0027'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0027'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u231A'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u231A'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u231A'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u231A'
			offset_start: 6
			offset_end: 9
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0020'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0020'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0020'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0020'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u00AD'
		expected: [WordBoundary{
			word: '\U0001F1E6\u00AD'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u00AD'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308\u00AD'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0300'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0300'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0300'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308\u0300'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u200D'
		expected: [WordBoundary{
			word: '\U0001F1E6\u200D'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u200D'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308\u200D'
			offset_start: 0
			offset_end: 9
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0061\u2060'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0061\u003A'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0061'
			offset_start: 6
			offset_end: 7
		}, WordBoundary{
			word: '\u003A'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0061\u0027'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0061'
			offset_start: 6
			offset_end: 7
		}, WordBoundary{
			word: '\u0027'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0061'
			offset_start: 6
			offset_end: 7
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 7
			offset_end: 11
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0061\u002C'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0061'
			offset_start: 6
			offset_end: 7
		}, WordBoundary{
			word: '\u002C'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0031\u003A'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0031'
			offset_start: 6
			offset_end: 7
		}, WordBoundary{
			word: '\u003A'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0031\u0027'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0031'
			offset_start: 6
			offset_end: 7
		}, WordBoundary{
			word: '\u0027'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0031\u002C'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0031'
			offset_start: 6
			offset_end: 7
		}, WordBoundary{
			word: '\u002C'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\U0001F1E6'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\U0001F1E6\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0031'
			offset_start: 6
			offset_end: 7
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 7
			offset_end: 11
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0001'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0001'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0001'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0001'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u000D'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u000D'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u000D'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000D'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u000A'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u000A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u000A'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u000B'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u000B'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u000B'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000B'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u3031'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u3031'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u3031'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u3031'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0041'
		expected: [WordBoundary{
			word: '\u05D0\u0041'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0041'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0041'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u003A'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u003A'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u002C'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u002C'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u002E'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u002E'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0030'
		expected: [WordBoundary{
			word: '\u05D0\u0030'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0030'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0030'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u005F'
		expected: [WordBoundary{
			word: '\u05D0\u005F'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u005F'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u005F'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\U0001F1E6'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u05D0'
		expected: [WordBoundary{
			word: '\u05D0\u05D0'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u05D0'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0022'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0022'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0022'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0022'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0027'
		expected: [WordBoundary{
			word: '\u05D0\u0027'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [7.1] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0027'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0027'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.1] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u231A'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u231A'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u231A'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u231A'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0020'
		expected: [WordBoundary{
			word: '\u05D0'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0020'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0020'
		expected: [WordBoundary{
			word: '\u05D0\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0020'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u00AD'
		expected: [WordBoundary{
			word: '\u05D0\u00AD'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u00AD'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0300'
		expected: [WordBoundary{
			word: '\u05D0\u0300'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0300'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0300'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u200D'
		expected: [WordBoundary{
			word: '\u05D0\u200D'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u200D'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u200D'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0061\u2060'
		expected: [WordBoundary{
			word: '\u05D0\u0061\u2060'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0061\u2060'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0061\u003A'
		expected: [WordBoundary{
			word: '\u05D0\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0061\u0027'
		expected: [WordBoundary{
			word: '\u05D0\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u05D0\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0061\u002C'
		expected: [WordBoundary{
			word: '\u05D0\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0031\u003A'
		expected: [WordBoundary{
			word: '\u05D0\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0031\u0027'
		expected: [WordBoundary{
			word: '\u05D0\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0031\u002C'
		expected: [WordBoundary{
			word: '\u05D0\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u05D0\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u05D0\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0001'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u000D'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u000A'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u000B'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u3031'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0041'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0041'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u003A'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u002C'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u002E'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0030'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0030'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u005F'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u005F'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u05D0'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0022'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0027'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u231A'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0020'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u00AD'
		expected: [WordBoundary{
			word: '\u0022\u00AD'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0022\u0308\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0300'
		expected: [WordBoundary{
			word: '\u0022\u0300'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0022\u0308\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u200D'
		expected: [WordBoundary{
			word: '\u0022\u200D'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0022\u0308\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0022'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0022\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0022\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] QUOTATION MARK (Double_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0001'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u000D'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u000A'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u000B'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u3031'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0041'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0041'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u003A'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u002C'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u002E'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0030'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0030'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u005F'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u005F'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u05D0'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0022'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0027'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u231A'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0020'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u00AD'
		expected: [WordBoundary{
			word: '\u0027\u00AD'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0027\u0308\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0300'
		expected: [WordBoundary{
			word: '\u0027\u0300'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0027\u0308\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u200D'
		expected: [WordBoundary{
			word: '\u0027\u200D'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0027\u0308\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0027'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0027\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0027\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0001'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0001'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0001'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u000D'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u000D'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u000D'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u000A'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u000A'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u000A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u000B'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u000B'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u000B'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u3031'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u3031'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u3031'
			offset_start: 5
			offset_end: 8
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0041'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0041'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0041'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u003A'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u003A'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u002C'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u002C'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u002E'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u002E'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002E'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0030'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0030'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0030'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u005F'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u005F'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u005F'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\U0001F1E6'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u05D0'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 5
			offset_end: 7
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0022'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0022'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0022'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0027'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0027'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u231A'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u231A'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u231A'
			offset_start: 5
			offset_end: 8
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0020'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0020'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0020'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u00AD'
		expected: [WordBoundary{
			word: '\u231A\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u231A\u0308\u00AD'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0300'
		expected: [WordBoundary{
			word: '\u231A\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0300'
		expected: [WordBoundary{
			word: '\u231A\u0308\u0300'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u200D'
		expected: [WordBoundary{
			word: '\u231A\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u200D'
		expected: [WordBoundary{
			word: '\u231A\u0308\u200D'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0061\u2060'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0061\u003A'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0061\u0027'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0061\u002C'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0031\u003A'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0031\u0027'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0031\u002C'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u231A'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] WATCH (ExtPict) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u231A\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u231A\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] WATCH (ExtPict) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0001'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0001'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u000D'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000D'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u000A'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u000B'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u000B'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u3031'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u3031'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0041'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0041'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u003A'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u002C'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u002E'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0030'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0030'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u005F'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u005F'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u05D0'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 1
			offset_end: 3
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0022'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0022'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0027'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u231A'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u231A'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u231A'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0020'
		expected: [WordBoundary{
			word: '\u0020\u0020'
			offset_start: 0
			offset_end: 2
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [3.4] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u00AD'
		expected: [WordBoundary{
			word: '\u0020\u00AD'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0020\u0308\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0300'
		expected: [WordBoundary{
			word: '\u0020\u0300'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0020\u0308\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u200D'
		expected: [WordBoundary{
			word: '\u0020\u200D'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0020\u0308\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0061'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0020'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0031'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0020\u0308'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0001'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0001'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0001'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0001'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u000D'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u000D'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u000D'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000D'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u000A'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u000A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u000A'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u000B'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u000B'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u000B'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000B'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u3031'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u3031'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u3031'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u3031'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0041'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0041'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0041'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0041'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u003A'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u003A'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u002C'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u002C'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u002E'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u002E'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0030'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0030'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0030'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0030'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u005F'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u005F'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u005F'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u005F'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\U0001F1E6'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u05D0'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 2
			offset_end: 4
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 4
			offset_end: 6
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0022'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0022'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0022'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0022'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0027'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0027'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u231A'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u231A'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u231A'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u231A'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0020'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0020'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0020'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0020'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u00AD'
		expected: [WordBoundary{
			word: '\u00AD\u00AD'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u00AD\u0308\u00AD'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0300'
		expected: [WordBoundary{
			word: '\u00AD\u0300'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0300'
		expected: [WordBoundary{
			word: '\u00AD\u0308\u0300'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u200D'
		expected: [WordBoundary{
			word: '\u00AD\u200D'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u200D'
		expected: [WordBoundary{
			word: '\u00AD\u0308\u200D'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0061\u2060'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0061\u003A'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0061\u0027'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0061\u002C'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0031\u003A'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0031\u0027'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0031\u002C'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u00AD'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u00AD\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u00AD\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0001'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0001'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0001'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u000D'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u000D'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000D'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u000A'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u000A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u000B'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u000B'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000B'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u3031'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u3031'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u3031'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0041'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0041'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0041'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u003A'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u002C'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u002E'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0030'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0030'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0030'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u005F'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u005F'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u005F'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u05D0'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 2
			offset_end: 4
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 4
			offset_end: 6
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0022'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0022'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0022'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0027'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u231A'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u231A'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u231A'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0020'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0020'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0020'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u00AD'
		expected: [WordBoundary{
			word: '\u0300\u00AD'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0300\u0308\u00AD'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0300'
		expected: [WordBoundary{
			word: '\u0300\u0300'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0300\u0308\u0300'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u200D'
		expected: [WordBoundary{
			word: '\u0300\u200D'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0300\u0308\u200D'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0300'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0300\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0300\u0308'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0001'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0001'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0001'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0001'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u000D'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000D'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u000D'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u000D'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u000A'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u000A'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u000A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u000B'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u000B'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u000B'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u000B'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u3031'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u3031'
			offset_start: 3
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u3031'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u3031'
			offset_start: 5
			offset_end: 8
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0041'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0041'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0041'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u003A'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u003A'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u002C'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u002C'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u002E'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u002E'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002E'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0030'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0030'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0030'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u005F'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u005F'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u005F'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u005F'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\U0001F1E6'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u05D0'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 3
			offset_end: 5
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 5
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0022'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0022'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0022'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0022'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0027'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0027'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u231A'
		expected: [WordBoundary{
			word: '\u200D\u231A'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u231A'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u231A'
			offset_start: 5
			offset_end: 8
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0020'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0020'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0020'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0020'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u00AD'
		expected: [WordBoundary{
			word: '\u200D\u00AD'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u200D\u0308\u00AD'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0300'
		expected: [WordBoundary{
			word: '\u200D\u0300'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0300'
		expected: [WordBoundary{
			word: '\u200D\u0308\u0300'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u200D'
		expected: [WordBoundary{
			word: '\u200D\u200D'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u200D'
		expected: [WordBoundary{
			word: '\u200D\u0308\u200D'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0061\u2060'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0061\u003A'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0061\u0027'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0061\u002C'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0031\u003A'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0031\u0027'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0031\u002C'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u200D'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u200D\u0308'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0001'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0001'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0001'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u000D'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000D'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u000D'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u000A'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u000A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u000B'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u000B'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u000B'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u3031'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u3031'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u3031'
			offset_start: 6
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0041'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0041'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0041'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u003A'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u002C'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u002E'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u002E'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0030'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0030'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0030'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u005F'
		expected: [WordBoundary{
			word: '\u0061\u2060\u005F'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u005F'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u05D0'
		expected: [WordBoundary{
			word: '\u0061\u2060\u05D0'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u05D0'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0022'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0022'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0022'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0027'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u231A'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u231A'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u231A'
			offset_start: 6
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0020'
		expected: [WordBoundary{
			word: '\u0061\u2060'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0020'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0020'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u00AD'
		expected: [WordBoundary{
			word: '\u0061\u2060\u00AD'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u00AD'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0300'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0300'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0300'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u200D'
		expected: [WordBoundary{
			word: '\u0061\u2060\u200D'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u200D'
			offset_start: 0
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0061\u2060'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0061\u2060'
			offset_start: 0
			offset_end: 10
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0061'
			offset_start: 0
			offset_end: 7
		}, WordBoundary{
			word: '\u003A'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0061'
			offset_start: 0
			offset_end: 7
		}, WordBoundary{
			word: '\u0027'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0061'
			offset_start: 0
			offset_end: 7
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 7
			offset_end: 11
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0061'
			offset_start: 0
			offset_end: 7
		}, WordBoundary{
			word: '\u002C'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0031'
			offset_start: 0
			offset_end: 7
		}, WordBoundary{
			word: '\u003A'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0031'
			offset_start: 0
			offset_end: 7
		}, WordBoundary{
			word: '\u0027'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0031'
			offset_start: 0
			offset_end: 7
		}, WordBoundary{
			word: '\u002C'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u2060\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0061\u2060\u0308\u0031'
			offset_start: 0
			offset_end: 7
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 7
			offset_end: 11
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0001'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0001'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0001'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u000D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000D'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000D'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u000A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u000B'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000B'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000B'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u3031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u3031'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u3031'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0041'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0041'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0308\u0041'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u002E'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0030'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0030'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0030'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u005F'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u005F'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u005F'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u05D0'
		expected: [WordBoundary{
			word: '\u0061\u003A\u05D0'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0308\u05D0'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0022'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0022'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0022'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u231A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u231A'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u231A'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0020'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0020'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0020'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u00AD'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u00AD'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308\u00AD'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0300'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0300'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308\u0300'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u200D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u200D'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308\u200D'
			offset_start: 1
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0061\u2060'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0308\u0061\u2060'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0061\u003A\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0001'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0001'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0001'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u000D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000D'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000D'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u000A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u000B'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000B'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000B'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u3031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u3031'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u3031'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0041'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0041'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0308\u0041'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u002E'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0030'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0030'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0030'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u005F'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u005F'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u005F'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u05D0'
		expected: [WordBoundary{
			word: '\u0061\u0027\u05D0'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0308\u05D0'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0022'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0022'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0022'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u231A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u231A'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u231A'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0020'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0020'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0020'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u00AD'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u00AD'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308\u00AD'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0300'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0300'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308\u0300'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u200D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u200D'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308\u200D'
			offset_start: 1
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0061\u2060'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0308\u0061\u2060'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0061\u0027\u0308\u0061'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0001'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0001'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0001'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u000D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u000D'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u000D'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u000A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u000A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u000A'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u000B'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u000B'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u000B'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u3031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u3031'
			offset_start: 5
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u3031'
			offset_start: 7
			offset_end: 10
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0041'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0041'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0308\u0041'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u003A'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u002C'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u002E'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u002E'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u002E'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0030'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0030'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0030'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u005F'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u005F'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u005F'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 7
			offset_end: 11
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u05D0'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u05D0'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0308\u05D0'
			offset_start: 0
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0022'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0022'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0022'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0027'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u231A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u231A'
			offset_start: 5
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u231A'
			offset_start: 7
			offset_end: 10
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0020'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0020'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0020'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u00AD'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u00AD'
			offset_start: 1
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308\u00AD'
			offset_start: 1
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0300'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0300'
			offset_start: 1
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308\u0300'
			offset_start: 1
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u200D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u200D'
			offset_start: 1
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308\u200D'
			offset_start: 1
			offset_end: 10
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0061\u2060'
			offset_start: 0
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0308\u0061\u2060'
			offset_start: 0
			offset_end: 11
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0061'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0308\u0061'
			offset_start: 0
			offset_end: 8
		}, WordBoundary{
			word: '\u003A'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0061'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0308\u0061'
			offset_start: 0
			offset_end: 8
		}, WordBoundary{
			word: '\u0027'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0061'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0308\u0061'
			offset_start: 0
			offset_end: 8
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 8
			offset_end: 12
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0061'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0061\u0027\u2060\u0308\u0061'
			offset_start: 0
			offset_end: 8
		}, WordBoundary{
			word: '\u002C'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0031'
			offset_start: 7
			offset_end: 8
		}, WordBoundary{
			word: '\u003A'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0031'
			offset_start: 7
			offset_end: 8
		}, WordBoundary{
			word: '\u0027'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0031'
			offset_start: 7
			offset_end: 8
		}, WordBoundary{
			word: '\u002C'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0027\u2060\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0031'
			offset_start: 7
			offset_end: 8
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 8
			offset_end: 12
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0001'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0001'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0001'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u000D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000D'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000D'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u000A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u000B'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000B'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000B'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u3031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u3031'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u3031'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0041'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0041'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0041'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u002E'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0030'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0030'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0030'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u005F'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u005F'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u005F'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u05D0'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 2
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 4
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0022'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0022'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0022'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u231A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u231A'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u231A'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0020'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0020'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0020'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u00AD'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u00AD'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308\u00AD'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0300'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0300'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308\u0300'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u200D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u200D'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308\u200D'
			offset_start: 1
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0001'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0001'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0001'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u000D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000D'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000D'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u000A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u000B'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000B'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000B'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u3031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u3031'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u3031'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0041'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0041'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0041'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u002E'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0030'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0030'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0030'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u005F'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u005F'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u005F'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u05D0'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 2
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 4
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0022'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0022'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0022'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u231A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u231A'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u231A'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0020'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0020'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0020'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u00AD'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u00AD'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308\u00AD'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0300'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0300'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308\u0300'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u200D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u200D'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308\u200D'
			offset_start: 1
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0031'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0031'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0001'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0001'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0001'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u000D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000D'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000D'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u000A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u000B'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000B'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000B'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u3031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u3031'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u3031'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0041'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0041'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0041'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u002E'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0030'
		expected: [WordBoundary{
			word: '\u0031\u0027\u0030'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0031\u0027\u0308\u0030'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u005F'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u005F'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u005F'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u05D0'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 2
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 4
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0022'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0022'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0022'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u231A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u231A'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u231A'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0020'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0020'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0020'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u00AD'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u00AD'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308\u00AD'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0300'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0300'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308\u0300'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u200D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u200D'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308\u200D'
			offset_start: 1
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0027\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0031\u0027\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0031\u0027\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0031\u0027\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0031\u0027\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0031\u0027\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0031\u0027\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0031\u0027\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u0027\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0031\u0027\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0001'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0001'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0001'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u000D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000D'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000D'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u000A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u000B'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u000B'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u000B'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u3031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u3031'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u3031'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0041'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0041'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0041'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u002E'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0030'
		expected: [WordBoundary{
			word: '\u0031\u002C\u0030'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0031\u002C\u0308\u0030'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u005F'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u005F'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u005F'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u05D0'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 2
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 4
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0022'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0022'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0022'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0027'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0027'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u231A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u231A'
			offset_start: 2
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u231A'
			offset_start: 4
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0020'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0020'
			offset_start: 2
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0020'
			offset_start: 4
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u00AD'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u00AD'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308\u00AD'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0300'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0300'
			offset_start: 1
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308\u0300'
			offset_start: 1
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u200D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u200D'
			offset_start: 1
			offset_end: 5
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308\u200D'
			offset_start: 1
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 2
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C\u0308'
			offset_start: 1
			offset_end: 4
		}, WordBoundary{
			word: '\u0061'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0031\u002C\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0031\u002C\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0031\u002C\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u0027'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0031\u002C\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0031\u002C\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0031\u002C\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0031\u002C\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 3
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0031\u002C\u0308\u0031'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0001'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0001'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0001'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0001'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u000D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u000D'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u000D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u000D'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u000A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u000A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u000A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u000A'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u000B'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u000B'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u000B'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u000B'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u3031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u3031'
			offset_start: 5
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u3031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u3031'
			offset_start: 7
			offset_end: 10
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0041'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0041'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0041'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0041'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u003A'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u003A'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u002C'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u002C'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u002E'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u002E'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u002E'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u002E'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0030'
		expected: [WordBoundary{
			word: '\u0031\u002E\u2060\u0030'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0030'
		expected: [WordBoundary{
			word: '\u0031\u002E\u2060\u0308\u0030'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u005F'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u005F'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u005F'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u005F'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\U0001F1E6'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\U0001F1E6'
			offset_start: 7
			offset_end: 11
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u05D0'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 5
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u05D0'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u05D0'
			offset_start: 7
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0022'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0022'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0022'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0022'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0027'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0027'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u231A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u231A'
			offset_start: 5
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u231A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u231A'
			offset_start: 7
			offset_end: 10
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0020'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0020'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0020'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0020'
			offset_start: 7
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u00AD'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u00AD'
			offset_start: 1
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u00AD'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308\u00AD'
			offset_start: 1
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0300'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0300'
			offset_start: 1
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0300'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308\u0300'
			offset_start: 1
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u200D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u200D'
			offset_start: 1
			offset_end: 8
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u200D'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308\u200D'
			offset_start: 1
			offset_end: 10
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 5
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0061\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0061\u2060'
			offset_start: 7
			offset_end: 11
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0061\u003A'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0061'
			offset_start: 7
			offset_end: 8
		}, WordBoundary{
			word: '\u003A'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0061\u0027'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0061'
			offset_start: 7
			offset_end: 8
		}, WordBoundary{
			word: '\u0027'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0061\u0027\u2060'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0061'
			offset_start: 7
			offset_end: 8
		}, WordBoundary{
			word: '\u0027\u2060'
			offset_start: 8
			offset_end: 12
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 1
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0061\u002C'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E\u2060\u0308'
			offset_start: 1
			offset_end: 7
		}, WordBoundary{
			word: '\u0061'
			offset_start: 7
			offset_end: 8
		}, WordBoundary{
			word: '\u002C'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0031\u002E\u2060\u0031'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u003A'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0031\u003A'
		expected: [WordBoundary{
			word: '\u0031\u002E\u2060\u0308\u0031'
			offset_start: 0
			offset_end: 8
		}, WordBoundary{
			word: '\u003A'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0031\u002E\u2060\u0031'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u0027'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0031\u0027'
		expected: [WordBoundary{
			word: '\u0031\u002E\u2060\u0308\u0031'
			offset_start: 0
			offset_end: 8
		}, WordBoundary{
			word: '\u0027'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0031\u002E\u2060\u0031'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u002C'
			offset_start: 6
			offset_end: 7
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0031\u002C'
		expected: [WordBoundary{
			word: '\u0031\u002E\u2060\u0308\u0031'
			offset_start: 0
			offset_end: 8
		}, WordBoundary{
			word: '\u002C'
			offset_start: 8
			offset_end: 9
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0031\u002E\u2060\u0031'
			offset_start: 0
			offset_end: 6
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 6
			offset_end: 10
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u2060\u0308\u0031\u002E\u2060'
		expected: [WordBoundary{
			word: '\u0031\u002E\u2060\u0308\u0031'
			offset_start: 0
			offset_end: 8
		}, WordBoundary{
			word: '\u002E\u2060'
			offset_start: 8
			offset_end: 12
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [12.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [11.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u000D\u000A\u0061\u000A\u0308'
		expected: [WordBoundary{
			word: '\u000D\u000A'
			offset_start: 0
			offset_end: 2
		}, WordBoundary{
			word: '\u0061'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u000A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u0308'
			offset_start: 4
			offset_end: 6
		}]
		desc: '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) × [3.0] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0308'
		expected: [WordBoundary{
			word: '\u0061\u0308'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u0020\u200D\u0646'
		expected: [WordBoundary{
			word: '\u0020\u200D'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\u0646'
			offset_start: 4
			offset_end: 6
		}]
		desc: '÷ [0.2] SPACE (WSegSpace) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] ARABIC LETTER NOON (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0646\u200D\u0020'
		expected: [WordBoundary{
			word: '\u0646\u200D'
			offset_start: 0
			offset_end: 5
		}, WordBoundary{
			word: '\u0020'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] ARABIC LETTER NOON (ALetter) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0041\u0041'
		expected: [WordBoundary{
			word: '\u0041\u0041\u0041'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u003A\u0041'
		expected: [WordBoundary{
			word: '\u0041\u003A\u0041'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [6.0] COLON (MidLetter) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u003A\u003A\u0041'
		expected: [WordBoundary{
			word: '\u0041'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0041'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0027'
		expected: [WordBoundary{
			word: '\u05D0\u0027'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [7.1] APOSTROPHE (Single_Quote) ÷ [0.3]'
	},
	TestCase{
		input: '\u05D0\u0022\u05D0'
		expected: [WordBoundary{
			word: '\u05D0\u0022\u05D0'
			offset_start: 0
			offset_end: 5
		}]
		desc: '÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [7.2] QUOTATION MARK (Double_Quote) × [7.3] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u0030\u0030\u0041'
		expected: [WordBoundary{
			word: '\u0041\u0030\u0030\u0041'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ZERO (Numeric) × [8.0] DIGIT ZERO (Numeric) × [10.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u002C\u0030'
		expected: [WordBoundary{
			word: '\u0030\u002C\u0030'
			offset_start: 0
			offset_end: 3
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) × [12.0] COMMA (MidNum) × [11.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0030\u002C\u002C\u0030'
		expected: [WordBoundary{
			word: '\u0030'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0030'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ZERO (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u3031\u3031'
		expected: [WordBoundary{
			word: '\u3031\u3031'
			offset_start: 0
			offset_end: 6
		}]
		desc: '÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [13.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u005F\u0030\u005F\u3031\u005F'
		expected: [WordBoundary{
			word: '\u0041\u005F\u0030\u005F\u3031\u005F'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ZERO (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] VERTICAL KANA REPEAT MARK (Katakana) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]'
	},
	TestCase{
		input: '\u0041\u005F\u005F\u0041'
		expected: [WordBoundary{
			word: '\u0041\u005F\u005F\u0041'
			offset_start: 0
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F1E6\U0001F1E7\U0001F1E8\u0062'
		expected: [WordBoundary{
			word: '\U0001F1E6\U0001F1E7'
			offset_start: 0
			offset_end: 8
		}, WordBoundary{
			word: '\U0001F1E8'
			offset_start: 8
			offset_end: 12
		}, WordBoundary{
			word: '\u0062'
			offset_start: 12
			offset_end: 13
		}]
		desc: '÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [15.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\U0001F1E6\U0001F1E7\U0001F1E8\u0062'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6\U0001F1E7'
			offset_start: 1
			offset_end: 9
		}, WordBoundary{
			word: '\U0001F1E8'
			offset_start: 9
			offset_end: 13
		}, WordBoundary{
			word: '\u0062'
			offset_start: 13
			offset_end: 14
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [16.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\U0001F1E6\U0001F1E7\u200D\U0001F1E8\u0062'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6\U0001F1E7\u200D'
			offset_start: 1
			offset_end: 12
		}, WordBoundary{
			word: '\U0001F1E8'
			offset_start: 12
			offset_end: 16
		}, WordBoundary{
			word: '\u0062'
			offset_start: 16
			offset_end: 17
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [16.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\U0001F1E6\u200D\U0001F1E7\U0001F1E8\u0062'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6\u200D\U0001F1E7'
			offset_start: 1
			offset_end: 12
		}, WordBoundary{
			word: '\U0001F1E8'
			offset_start: 12
			offset_end: 16
		}, WordBoundary{
			word: '\u0062'
			offset_start: 16
			offset_end: 17
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) × [16.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\U0001F1E6\U0001F1E7\U0001F1E8\U0001F1E9\u0062'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\U0001F1E6\U0001F1E7'
			offset_start: 1
			offset_end: 9
		}, WordBoundary{
			word: '\U0001F1E8\U0001F1E9'
			offset_start: 9
			offset_end: 17
		}, WordBoundary{
			word: '\u0062'
			offset_start: 17
			offset_end: 18
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [16.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) × [16.0] REGIONAL INDICATOR SYMBOL LETTER D (RI) ÷ [999.0] LATIN SMALL LETTER B (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F476\U0001F3FF\U0001F476'
		expected: [WordBoundary{
			word: '\U0001F476\U0001F3FF'
			offset_start: 0
			offset_end: 8
		}, WordBoundary{
			word: '\U0001F476'
			offset_start: 8
			offset_end: 12
		}]
		desc: '÷ [0.2] BABY (ExtPict) × [4.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend_FE) ÷ [999.0] BABY (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F6D1\u200D\U0001F6D1'
		expected: [WordBoundary{
			word: '\U0001F6D1\u200D\U0001F6D1'
			offset_start: 0
			offset_end: 11
		}]
		desc: '÷ [0.2] OCTAGONAL SIGN (ExtPict) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] OCTAGONAL SIGN (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u200D\U0001F6D1'
		expected: [WordBoundary{
			word: '\u0061\u200D\U0001F6D1'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] OCTAGONAL SIGN (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u2701\u200D\u2701'
		expected: [WordBoundary{
			word: '\u2701\u200D\u2701'
			offset_start: 0
			offset_end: 9
		}]
		desc: '÷ [0.2] UPPER BLADE SCISSORS (Other) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] UPPER BLADE SCISSORS (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u200D\u2701'
		expected: [WordBoundary{
			word: '\u0061\u200D\u2701'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] UPPER BLADE SCISSORS (Other) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F476\U0001F3FF\u0308\u200D\U0001F476\U0001F3FF'
		expected: [WordBoundary{
			word: '\U0001F476\U0001F3FF\u0308\u200D\U0001F476\U0001F3FF'
			offset_start: 0
			offset_end: 21
		}]
		desc: '÷ [0.2] BABY (ExtPict) × [4.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] BABY (ExtPict) × [4.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F6D1\U0001F3FF'
		expected: [WordBoundary{
			word: '\U0001F6D1\U0001F3FF'
			offset_start: 0
			offset_end: 8
		}]
		desc: '÷ [0.2] OCTAGONAL SIGN (ExtPict) × [4.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\U0001F6D1\U0001F3FF'
		expected: [WordBoundary{
			word: '\u200D\U0001F6D1\U0001F3FF'
			offset_start: 0
			offset_end: 11
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] OCTAGONAL SIGN (ExtPict) × [4.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\U0001F6D1'
		expected: [WordBoundary{
			word: '\u200D\U0001F6D1'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] OCTAGONAL SIGN (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u200D\U0001F6D1'
		expected: [WordBoundary{
			word: '\u200D\U0001F6D1'
			offset_start: 0
			offset_end: 7
		}]
		desc: '÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] OCTAGONAL SIGN (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\U0001F6D1\U0001F6D1'
		expected: [WordBoundary{
			word: '\U0001F6D1'
			offset_start: 0
			offset_end: 4
		}, WordBoundary{
			word: '\U0001F6D1'
			offset_start: 4
			offset_end: 8
		}]
		desc: '÷ [0.2] OCTAGONAL SIGN (ExtPict) ÷ [999.0] OCTAGONAL SIGN (ExtPict) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0308\u200D\u0308\u0062'
		expected: [WordBoundary{
			word: '\u0061\u0308\u200D\u0308\u0062'
			offset_start: 0
			offset_end: 9
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER B (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u0020\u0020\u0062'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u0020\u0020'
			offset_start: 1
			offset_end: 3
		}, WordBoundary{
			word: '\u0062'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] SPACE (WSegSpace) × [3.4] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER B (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u003A\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u003A\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u003A\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u003A\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u003A\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u003A\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u003A\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u003A\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u003A\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u003A\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u003A\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u003A\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u003A\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002E\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002E\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002E\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002E\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002E\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002E\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002E\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002E\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002E\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002E\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002E\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002E\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002E\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002C\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002C\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002C\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002C\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002C\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002C\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002C\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002C\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002C\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002C\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u002C\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0031'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0031\u002C\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0031\u005F\u0061\u002C\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0031\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u003A\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u003A\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u003A\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u003A\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u003A\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u003A\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u003A\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u003A\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u003A\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u003A\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u003A\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u003A'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u003A\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u003A\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u003A'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002E\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002E\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002E\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002E\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002E\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002E\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002E\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002E\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002E\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002E\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002E\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002E\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002E\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002E\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002E\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002E\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002E'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002E\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002E\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002E'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002C\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002C\u003A\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u003A'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002C\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002C\u003A\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u003A'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002C\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002C\u002E\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002E'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002C\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002C\u002E\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002E'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0031'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002C\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002C\u002C\u0031'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0031'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u002C\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0061'
			offset_start: 0
			offset_end: 1
		}, WordBoundary{
			word: '\u002C'
			offset_start: 1
			offset_end: 2
		}, WordBoundary{
			word: '\u002C'
			offset_start: 2
			offset_end: 3
		}, WordBoundary{
			word: '\u0061'
			offset_start: 3
			offset_end: 4
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0031\u002C\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0031'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
	TestCase{
		input: '\u0061\u005F\u0061\u002C\u002C\u0061'
		expected: [WordBoundary{
			word: '\u0061\u005F\u0061'
			offset_start: 0
			offset_end: 3
		}, WordBoundary{
			word: '\u002C'
			offset_start: 3
			offset_end: 4
		}, WordBoundary{
			word: '\u002C'
			offset_start: 4
			offset_end: 5
		}, WordBoundary{
			word: '\u0061'
			offset_start: 5
			offset_end: 6
		}]
		desc: '÷ [0.2] LATIN SMALL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]'
	},
]
