module sentence

// NOTE: The following code was generated by "gen/gen.v sentence_breaktest". DO NOT EDIT.

struct TestCase {
	input    string             @[required]
	expected []SentenceBoundary @[required]
	desc     string
}

// sentence_break_test_cases are the sentence boundary break test cases.
// They are taken from https://www.unicode.org/Public/15.0.0/ucd/auxiliary/SentenceBreakTest.txt.
const sentence_break_test_cases = [
	TestCase{
		input:    '\u0001\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0001'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u0001'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u000D'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u000D'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u000A'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u000A'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0085'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u0085'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0009'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u0009'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0061'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u0061'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0041'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u0041'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u01BB'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u01BB'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0030'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u0030'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u002E'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u002E'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0021'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u0021'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0022'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u0022'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u002C'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u002C'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u00AD'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u00AD'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0300'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0001\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0001\u0308\u0300'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <START OF HEADING> (Other) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0001'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0001'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u000D'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D\u000A'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) × [3.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u000A'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 1
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0085'
				offset_start: 1
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0009'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0009'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0061'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0061'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0041'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0041'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u01BB'
				offset_start: 1
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u01BB'
				offset_start: 1
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0030'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0030'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u002E'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u002E'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0021'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0021'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0022'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0022'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u002C'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u002C'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u00AD'
				offset_start: 1
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u00AD'
				offset_start: 1
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0300'
				offset_start: 1
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0300'
				offset_start: 1
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0001'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0001'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u000D'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u000A'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 1
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0085'
				offset_start: 1
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0009'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0009'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0061'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0061'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0041'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0041'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u01BB'
				offset_start: 1
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u01BB'
				offset_start: 1
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0030'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0030'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u002E'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u002E'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0021'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0021'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0022'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0022'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u002C'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u002C'
				offset_start: 1
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u00AD'
				offset_start: 1
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u00AD'
				offset_start: 1
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0300'
				offset_start: 1
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000A\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0308\u0300'
				offset_start: 1
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0001'
				offset_start: 2
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u0001'
				offset_start: 2
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u000D'
				offset_start: 2
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u000D'
				offset_start: 2
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u000A'
				offset_start: 2
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u000A'
				offset_start: 2
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 2
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u0085'
				offset_start: 2
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0009'
				offset_start: 2
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u0009'
				offset_start: 2
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0061'
				offset_start: 2
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u0061'
				offset_start: 2
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0041'
				offset_start: 2
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u0041'
				offset_start: 2
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u01BB'
				offset_start: 2
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u01BB'
				offset_start: 2
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0030'
				offset_start: 2
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u0030'
				offset_start: 2
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u002E'
				offset_start: 2
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u002E'
				offset_start: 2
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0021'
				offset_start: 2
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u0021'
				offset_start: 2
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0022'
				offset_start: 2
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u0022'
				offset_start: 2
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u002C'
				offset_start: 2
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u002C'
				offset_start: 2
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u00AD'
				offset_start: 2
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u00AD'
				offset_start: 2
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0300'
				offset_start: 2
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0085\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0085'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0308\u0300'
				offset_start: 2
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] <NEXT LINE (NEL)> (Sep) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0001'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u0001'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u000D'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u000D'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u000A'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u000A'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0085'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u0085'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0009'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u0009'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0061'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u0061'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0041'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u0041'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u01BB'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u01BB'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0030'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u0030'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u002E'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u002E'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0021'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u0021'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0022'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u0022'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u002C'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u002C'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u00AD'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u00AD'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0300'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0009\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0009\u0308\u0300'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] <CHARACTER TABULATION> (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0001'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u0001'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u000D'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u000D'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u000A'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u000A'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0085'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u0085'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0009'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u0009'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0061'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u0061'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0041'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u0041'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u01BB'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u01BB'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0030'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u0030'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u002E'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u002E'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0021'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u0021'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0022'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u0022'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u002C'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u002C'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u00AD'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u00AD'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0300'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308\u0300'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0001'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u0001'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u000D'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u000D'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u000A'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u000A'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0085'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u0085'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0009'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u0009'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0061'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u0061'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0041'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u0041'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u01BB'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u01BB'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0030'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u0030'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u002E'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u002E'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0021'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u0021'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0022'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u0022'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u002C'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u002C'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u00AD'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u00AD'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0300'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0041\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0041\u0308\u0300'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0001'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u0001'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u000D'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u000D'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u000A'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u000A'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0085'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u0085'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0009'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u0009'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0061'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u0061'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0041'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u0041'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u01BB'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u01BB'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0030'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u0030'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u002E'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u002E'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0021'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u0021'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0022'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u0022'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u002C'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u002C'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u00AD'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u00AD'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0300'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u01BB\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u01BB\u0308\u0300'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] LATIN LETTER TWO WITH STROKE (OLetter) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0001'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u0001'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u000D'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u000D'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u000A'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u000A'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0085'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u0085'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0009'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u0009'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0061'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u0061'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0041'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u0041'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u01BB'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u01BB'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0030'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u0030'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u002E'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u002E'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0021'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u0021'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0022'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u0022'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u002C'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u002C'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u00AD'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u00AD'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0300'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0030\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0030\u0308\u0300'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] DIGIT ZERO (Numeric) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0001'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) ÷ [11.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308'
				offset_start: 0
				offset_end:   3
			},
			SentenceBoundary{
				sentence:     '\u0001'
				offset_start: 3
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u000D'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [9.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u000D'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [9.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u000A'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [9.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u000A'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [9.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0085'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [9.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u0085'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [9.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0009'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [9.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u0009'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [9.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0061'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [8.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u0061'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [8.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0041'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) ÷ [11.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308'
				offset_start: 0
				offset_end:   3
			},
			SentenceBoundary{
				sentence:     '\u0041'
				offset_start: 3
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u01BB'
				offset_start: 1
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) ÷ [11.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308'
				offset_start: 0
				offset_end:   3
			},
			SentenceBoundary{
				sentence:     '\u01BB'
				offset_start: 3
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0030'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [6.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u0030'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [6.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u002E'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [8.1] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u002E'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [8.1] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0021'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [8.1] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u0021'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [8.1] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0022'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [9.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u0022'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [9.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u002C'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [8.1] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u002C'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [8.1] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u00AD'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u00AD'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0300'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002E\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u002E\u0308\u0300'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] FULL STOP (ATerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0001'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) ÷ [11.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308'
				offset_start: 0
				offset_end:   3
			},
			SentenceBoundary{
				sentence:     '\u0001'
				offset_start: 3
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u000D'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [9.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308\u000D'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [9.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u000A'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [9.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308\u000A'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [9.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0085'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [9.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308\u0085'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [9.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0009'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [9.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308\u0009'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [9.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0061'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) ÷ [11.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308'
				offset_start: 0
				offset_end:   3
			},
			SentenceBoundary{
				sentence:     '\u0061'
				offset_start: 3
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0041'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) ÷ [11.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308'
				offset_start: 0
				offset_end:   3
			},
			SentenceBoundary{
				sentence:     '\u0041'
				offset_start: 3
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u01BB'
				offset_start: 1
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) ÷ [11.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308'
				offset_start: 0
				offset_end:   3
			},
			SentenceBoundary{
				sentence:     '\u01BB'
				offset_start: 3
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021'
				offset_start: 0
				offset_end:   1
			},
			SentenceBoundary{
				sentence:     '\u0030'
				offset_start: 1
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) ÷ [11.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308'
				offset_start: 0
				offset_end:   3
			},
			SentenceBoundary{
				sentence:     '\u0030'
				offset_start: 3
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u002E'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [8.1] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308\u002E'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [8.1] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0021'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [8.1] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308\u0021'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [8.1] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0022'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [9.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308\u0022'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [9.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u002C'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [8.1] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308\u002C'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [8.1] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u00AD'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308\u00AD'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0300'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0308\u0300'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0001'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u0001'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u000D'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u000D'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u000A'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u000A'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0085'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u0085'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0009'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u0009'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0061'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u0061'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0041'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u0041'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u01BB'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u01BB'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0030'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u0030'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u002E'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u002E'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0021'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u0021'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0022'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u0022'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u002C'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u002C'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u00AD'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u00AD'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0300'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0022\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0022\u0308\u0300'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0001'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u0001'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u000D'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u000D'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u000A'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u000A'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0085'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u0085'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0009'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u0009'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0061'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u0061'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0041'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u0041'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u01BB'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u01BB'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0030'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u0030'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u002E'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u002E'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0021'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u0021'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0022'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u0022'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u002C'
				offset_start: 0
				offset_end:   2
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u002C'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u00AD'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u00AD'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0300'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u002C\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u002C\u0308\u0300'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMMA (SContinue) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0001'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u0001'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u000D'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u000D'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u000A'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u000A'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0085'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u0085'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0009'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u0009'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0061'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u0061'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0041'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u0041'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u01BB'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u01BB'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0030'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u0030'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u002E'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u002E'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0021'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u0021'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0022'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u0022'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u002C'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u002C'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u00AD'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u00AD'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0300'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u00AD\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u00AD\u0308\u0300'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] SOFT HYPHEN (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0001'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u0001'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u0001'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <START OF HEADING> (Other) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u000D'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u000D'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u000D'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u000A'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u000A'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u000A'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <LINE FEED (LF)> (LF) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0085'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u0085'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u0085'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0009'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u0009'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u0009'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0061'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u0061'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u0061'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0041'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u0041'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u0041'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u01BB'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u01BB'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u01BB'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0030'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u0030'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u0030'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u002E'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u002E'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0021'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u0021'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u0021'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0022'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u0022'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u0022'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u002C'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u002C'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u002C'
				offset_start: 0
				offset_end:   5
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u00AD'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u00AD'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u00AD'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0300'
				offset_start: 0
				offset_end:   4
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0300\u0308\u0300'
		expected: [
			SentenceBoundary{
				sentence:     '\u0300\u0308\u0300'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u000D\u000A\u0061\u000A\u0308'
		expected: [
			SentenceBoundary{
				sentence:     '\u000D\u000A'
				offset_start: 0
				offset_end:   2
			},
			SentenceBoundary{
				sentence:     '\u0061\u000A'
				offset_start: 2
				offset_end:   4
			},
			SentenceBoundary{
				sentence:     '\u0308'
				offset_start: 4
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] <CARRIAGE RETURN (CR)> (CR) × [3.0] <LINE FEED (LF)> (LF) ÷ [4.0] LATIN SMALL LETTER A (Lower) × [998.0] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0061\u0308'
		expected: [
			SentenceBoundary{
				sentence:     '\u0061\u0308'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0020\u200D\u0646'
		expected: [
			SentenceBoundary{
				sentence:     '\u0020\u200D\u0646'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] SPACE (Sp) × [5.0] ZERO WIDTH JOINER (Extend_FE) × [998.0] ARABIC LETTER NOON (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0646\u200D\u0020'
		expected: [
			SentenceBoundary{
				sentence:     '\u0646\u200D\u0020'
				offset_start: 0
				offset_end:   6
			},
		]
		desc:     '÷ [0.2] ARABIC LETTER NOON (OLetter) × [5.0] ZERO WIDTH JOINER (Extend_FE) × [998.0] SPACE (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0028\u0022\u0047\u006F\u002E\u0022\u0029\u0020\u0028\u0048\u0065\u0020\u0064\u0069\u0064\u002E\u0029'
		expected: [
			SentenceBoundary{
				sentence:     '\u0028\u0022\u0047\u006F\u002E\u0022\u0029\u0020'
				offset_start: 0
				offset_end:   8
			},
			SentenceBoundary{
				sentence:     '\u0028\u0048\u0065\u0020\u0064\u0069\u0064\u002E\u0029'
				offset_start: 8
				offset_end:   17
			},
		]
		desc:     '÷ [0.2] LEFT PARENTHESIS (Close) × [998.0] QUOTATION MARK (Close) × [998.0] LATIN CAPITAL LETTER G (Upper) × [998.0] LATIN SMALL LETTER O (Lower) × [998.0] FULL STOP (ATerm) × [9.0] QUOTATION MARK (Close) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] SPACE (Sp) ÷ [11.0] LEFT PARENTHESIS (Close) × [998.0] LATIN CAPITAL LETTER H (Upper) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] SPACE (Sp) × [998.0] LATIN SMALL LETTER D (Lower) × [998.0] LATIN SMALL LETTER I (Lower) × [998.0] LATIN SMALL LETTER D (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0028\u201C\u0047\u006F\u003F\u201D\u0029\u0020\u0028\u0048\u0065\u0020\u0064\u0069\u0064\u002E\u0029'
		expected: [
			SentenceBoundary{
				sentence:     '\u0028\u201C\u0047\u006F\u003F\u201D\u0029\u0020'
				offset_start: 0
				offset_end:   12
			},
			SentenceBoundary{
				sentence:     '\u0028\u0048\u0065\u0020\u0064\u0069\u0064\u002E\u0029'
				offset_start: 12
				offset_end:   21
			},
		]
		desc:     '÷ [0.2] LEFT PARENTHESIS (Close) × [998.0] LEFT DOUBLE QUOTATION MARK (Close) × [998.0] LATIN CAPITAL LETTER G (Upper) × [998.0] LATIN SMALL LETTER O (Lower) × [998.0] QUESTION MARK (STerm) × [9.0] RIGHT DOUBLE QUOTATION MARK (Close) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] SPACE (Sp) ÷ [11.0] LEFT PARENTHESIS (Close) × [998.0] LATIN CAPITAL LETTER H (Upper) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] SPACE (Sp) × [998.0] LATIN SMALL LETTER D (Lower) × [998.0] LATIN SMALL LETTER I (Lower) × [998.0] LATIN SMALL LETTER D (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0055\u002E\u0053\u002E\u0041\u0300\u002E\u0020\u0069\u0073'
		expected: [
			SentenceBoundary{
				sentence:     '\u0055\u002E\u0053\u002E\u0041\u0300\u002E\u0020\u0069\u0073'
				offset_start: 0
				offset_end:   11
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER U (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER S (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] FULL STOP (ATerm) × [8.0] SPACE (Sp) × [8.0] LATIN SMALL LETTER I (Lower) × [998.0] LATIN SMALL LETTER S (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0055\u002E\u0053\u002E\u0041\u0300\u003F\u0020\u0048\u0065'
		expected: [
			SentenceBoundary{
				sentence:     '\u0055\u002E\u0053\u002E\u0041\u0300\u003F\u0020'
				offset_start: 0
				offset_end:   9
			},
			SentenceBoundary{
				sentence:     '\u0048\u0065'
				offset_start: 9
				offset_end:   11
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER U (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER S (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] QUESTION MARK (STerm) × [9.0] SPACE (Sp) ÷ [11.0] LATIN CAPITAL LETTER H (Upper) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0055\u002E\u0053\u002E\u0041\u0300\u002E'
		expected: [
			SentenceBoundary{
				sentence:     '\u0055\u002E\u0053\u002E\u0041\u0300\u002E'
				offset_start: 0
				offset_end:   8
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER U (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER S (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0033\u002E\u0034'
		expected: [
			SentenceBoundary{
				sentence:     '\u0033\u002E\u0034'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] DIGIT THREE (Numeric) × [998.0] FULL STOP (ATerm) × [6.0] DIGIT FOUR (Numeric) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0063\u002E\u0064'
		expected: [
			SentenceBoundary{
				sentence:     '\u0063\u002E\u0064'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [8.0] LATIN SMALL LETTER D (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0043\u002E\u0064'
		expected: [
			SentenceBoundary{
				sentence:     '\u0043\u002E\u0064'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER C (Upper) × [998.0] FULL STOP (ATerm) × [8.0] LATIN SMALL LETTER D (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0063\u002E\u0044'
		expected: [
			SentenceBoundary{
				sentence:     '\u0063\u002E\u0044'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER D (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0043\u002E\u0044'
		expected: [
			SentenceBoundary{
				sentence:     '\u0043\u002E\u0044'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] LATIN CAPITAL LETTER C (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER D (Upper) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0\u0074\u0068\u0065'
		expected: [
			SentenceBoundary{
				sentence:     '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0\u0074\u0068\u0065'
				offset_start: 0
				offset_end:   13
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [8.0] RIGHT PARENTHESIS (Close) × [8.0] RIGHT SINGLE QUOTATION MARK (Close) × [8.0] NO-BREAK SPACE (Sp) × [8.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0\u0054\u0068\u0065'
		expected: [
			SentenceBoundary{
				sentence:     '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0'
				offset_start: 0
				offset_end:   10
			},
			SentenceBoundary{
				sentence:     '\u0054\u0068\u0065'
				offset_start: 10
				offset_end:   13
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [9.0] NO-BREAK SPACE (Sp) ÷ [11.0] LATIN CAPITAL LETTER T (Upper) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0\u2018\u0028\u0074\u0068\u0065'
		expected: [
			SentenceBoundary{
				sentence:     '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0\u2018\u0028\u0074\u0068\u0065'
				offset_start: 0
				offset_end:   17
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [8.0] RIGHT PARENTHESIS (Close) × [8.0] RIGHT SINGLE QUOTATION MARK (Close) × [8.0] NO-BREAK SPACE (Sp) × [8.0] LEFT SINGLE QUOTATION MARK (Close) × [998.0] LEFT PARENTHESIS (Close) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0\u2018\u0028\u0054\u0068\u0065'
		expected: [
			SentenceBoundary{
				sentence:     '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0'
				offset_start: 0
				offset_end:   10
			},
			SentenceBoundary{
				sentence:     '\u2018\u0028\u0054\u0068\u0065'
				offset_start: 10
				offset_end:   17
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [9.0] NO-BREAK SPACE (Sp) ÷ [11.0] LEFT SINGLE QUOTATION MARK (Close) × [998.0] LEFT PARENTHESIS (Close) × [998.0] LATIN CAPITAL LETTER T (Upper) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0\u0308\u0074\u0068\u0065'
		expected: [
			SentenceBoundary{
				sentence:     '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0\u0308\u0074\u0068\u0065'
				offset_start: 0
				offset_end:   15
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [8.0] RIGHT PARENTHESIS (Close) × [8.0] RIGHT SINGLE QUOTATION MARK (Close) × [8.0] NO-BREAK SPACE (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [8.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0\u0308\u0054\u0068\u0065'
		expected: [
			SentenceBoundary{
				sentence:     '\u0065\u0074\u0063\u002E\u0029\u2019\u00A0\u0308'
				offset_start: 0
				offset_end:   12
			},
			SentenceBoundary{
				sentence:     '\u0054\u0068\u0065'
				offset_start: 12
				offset_end:   15
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [9.0] NO-BREAK SPACE (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] LATIN CAPITAL LETTER T (Upper) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0065\u0074\u0063\u002E\u0029\u2019\u0308\u0054\u0068\u0065'
		expected: [
			SentenceBoundary{
				sentence:     '\u0065\u0074\u0063\u002E\u0029\u2019\u0308'
				offset_start: 0
				offset_end:   10
			},
			SentenceBoundary{
				sentence:     '\u0054\u0068\u0065'
				offset_start: 10
				offset_end:   13
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] LATIN CAPITAL LETTER T (Upper) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0065\u0074\u0063\u002E\u0029\u000A\u0308\u0054\u0068\u0065'
		expected: [
			SentenceBoundary{
				sentence:     '\u0065\u0074\u0063\u002E\u0029\u000A'
				offset_start: 0
				offset_end:   6
			},
			SentenceBoundary{
				sentence:     '\u0308\u0054\u0068\u0065'
				offset_start: 6
				offset_end:   11
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER T (Upper) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0074\u0068\u0065\u0020\u0072\u0065\u0073\u0070\u002E\u0020\u006C\u0065\u0061\u0064\u0065\u0072\u0073\u0020\u0061\u0072\u0065'
		expected: [
			SentenceBoundary{
				sentence:     '\u0074\u0068\u0065\u0020\u0072\u0065\u0073\u0070\u002E\u0020\u006C\u0065\u0061\u0064\u0065\u0072\u0073\u0020\u0061\u0072\u0065'
				offset_start: 0
				offset_end:   21
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] SPACE (Sp) × [998.0] LATIN SMALL LETTER R (Lower) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER S (Lower) × [998.0] LATIN SMALL LETTER P (Lower) × [998.0] FULL STOP (ATerm) × [8.0] SPACE (Sp) × [8.0] LATIN SMALL LETTER L (Lower) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER A (Lower) × [998.0] LATIN SMALL LETTER D (Lower) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER R (Lower) × [998.0] LATIN SMALL LETTER S (Lower) × [998.0] SPACE (Sp) × [998.0] LATIN SMALL LETTER A (Lower) × [998.0] LATIN SMALL LETTER R (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]'
	},
	TestCase{
		input:    '\u5B57\u002E\u5B57'
		expected: [
			SentenceBoundary{
				sentence:     '\u5B57\u002E'
				offset_start: 0
				offset_end:   4
			},
			SentenceBoundary{
				sentence:     '\u5B57'
				offset_start: 4
				offset_end:   7
			},
		]
		desc:     '÷ [0.2] CJK UNIFIED IDEOGRAPH-5B57 (OLetter) × [998.0] FULL STOP (ATerm) ÷ [11.0] CJK UNIFIED IDEOGRAPH-5B57 (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0065\u0074\u0063\u002E\u5B83'
		expected: [
			SentenceBoundary{
				sentence:     '\u0065\u0074\u0063\u002E'
				offset_start: 0
				offset_end:   4
			},
			SentenceBoundary{
				sentence:     '\u5B83'
				offset_start: 4
				offset_end:   7
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) ÷ [11.0] CJK UNIFIED IDEOGRAPH-5B83 (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0065\u0074\u0063\u002E\u3002'
		expected: [
			SentenceBoundary{
				sentence:     '\u0065\u0074\u0063\u002E\u3002'
				offset_start: 0
				offset_end:   7
			},
		]
		desc:     '÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [8.1] IDEOGRAPHIC FULL STOP (STerm) ÷ [0.3]'
	},
	TestCase{
		input:    '\u5B57\u3002\u5B83'
		expected: [
			SentenceBoundary{
				sentence:     '\u5B57\u3002'
				offset_start: 0
				offset_end:   6
			},
			SentenceBoundary{
				sentence:     '\u5B83'
				offset_start: 6
				offset_end:   9
			},
		]
		desc:     '÷ [0.2] CJK UNIFIED IDEOGRAPH-5B57 (OLetter) × [998.0] IDEOGRAPHIC FULL STOP (STerm) ÷ [11.0] CJK UNIFIED IDEOGRAPH-5B83 (OLetter) ÷ [0.3]'
	},
	TestCase{
		input:    '\u0021\u0020\u0020'
		expected: [
			SentenceBoundary{
				sentence:     '\u0021\u0020\u0020'
				offset_start: 0
				offset_end:   3
			},
		]
		desc:     '÷ [0.2] EXCLAMATION MARK (STerm) × [9.0] SPACE (Sp) × [10.0] SPACE (Sp) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0028\u2060\u0022\u2060\u0047\u2060\u006F\u2060\u002E\u2060\u0022\u2060\u0029\u2060\u0020\u2060\u0028\u2060\u0048\u2060\u0065\u2060\u0020\u2060\u0064\u2060\u0069\u2060\u0064\u2060\u002E\u2060\u0029\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0028\u2060\u0022\u2060\u0047\u2060\u006F\u2060\u002E\u2060\u0022\u2060\u0029\u2060\u0020\u2060'
				offset_start: 0
				offset_end:   35
			},
			SentenceBoundary{
				sentence:     '\u0028\u2060\u0048\u2060\u0065\u2060\u0020\u2060\u0064\u2060\u0069\u2060\u0064\u2060\u002E\u2060\u0029\u2060\u2060'
				offset_start: 35
				offset_end:   74
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LEFT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [998.0] QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN CAPITAL LETTER G (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER O (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [9.0] QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] SPACE (Sp) × [5.0] WORD JOINER (Format_FE) ÷ [11.0] LEFT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN CAPITAL LETTER H (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER D (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER I (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER D (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0028\u2060\u201C\u2060\u0047\u2060\u006F\u2060\u003F\u2060\u201D\u2060\u0029\u2060\u0020\u2060\u0028\u2060\u0048\u2060\u0065\u2060\u0020\u2060\u0064\u2060\u0069\u2060\u0064\u2060\u002E\u2060\u0029\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0028\u2060\u201C\u2060\u0047\u2060\u006F\u2060\u003F\u2060\u201D\u2060\u0029\u2060\u0020\u2060'
				offset_start: 0
				offset_end:   39
			},
			SentenceBoundary{
				sentence:     '\u0028\u2060\u0048\u2060\u0065\u2060\u0020\u2060\u0064\u2060\u0069\u2060\u0064\u2060\u002E\u2060\u0029\u2060\u2060'
				offset_start: 39
				offset_end:   78
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LEFT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [998.0] LEFT DOUBLE QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN CAPITAL LETTER G (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER O (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] QUESTION MARK (STerm) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT DOUBLE QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] SPACE (Sp) × [5.0] WORD JOINER (Format_FE) ÷ [11.0] LEFT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN CAPITAL LETTER H (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER D (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER I (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER D (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0055\u2060\u002E\u2060\u0053\u2060\u002E\u2060\u0041\u2060\u0300\u002E\u2060\u0020\u2060\u0069\u2060\u0073\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0055\u2060\u002E\u2060\u0053\u2060\u002E\u2060\u0041\u2060\u0300\u002E\u2060\u0020\u2060\u0069\u2060\u0073\u2060\u2060'
				offset_start: 0
				offset_end:   44
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN CAPITAL LETTER U (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [7.0] LATIN CAPITAL LETTER S (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [7.0] LATIN CAPITAL LETTER A (Upper) × [5.0] WORD JOINER (Format_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [8.0] SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [8.0] LATIN SMALL LETTER I (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER S (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0055\u2060\u002E\u2060\u0053\u2060\u002E\u2060\u0041\u2060\u0300\u003F\u2060\u0020\u2060\u0048\u2060\u0065\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0055\u2060\u002E\u2060\u0053\u2060\u002E\u2060\u0041\u2060\u0300\u003F\u2060\u0020\u2060'
				offset_start: 0
				offset_end:   33
			},
			SentenceBoundary{
				sentence:     '\u0048\u2060\u0065\u2060\u2060'
				offset_start: 33
				offset_end:   44
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN CAPITAL LETTER U (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [7.0] LATIN CAPITAL LETTER S (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [7.0] LATIN CAPITAL LETTER A (Upper) × [5.0] WORD JOINER (Format_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] QUESTION MARK (STerm) × [5.0] WORD JOINER (Format_FE) × [9.0] SPACE (Sp) × [5.0] WORD JOINER (Format_FE) ÷ [11.0] LATIN CAPITAL LETTER H (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0055\u2060\u002E\u2060\u0053\u2060\u002E\u2060\u0041\u2060\u0300\u002E\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0055\u2060\u002E\u2060\u0053\u2060\u002E\u2060\u0041\u2060\u0300\u002E\u2060\u2060'
				offset_start: 0
				offset_end:   32
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN CAPITAL LETTER U (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [7.0] LATIN CAPITAL LETTER S (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [7.0] LATIN CAPITAL LETTER A (Upper) × [5.0] WORD JOINER (Format_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0033\u2060\u002E\u2060\u0034\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0033\u2060\u002E\u2060\u0034\u2060\u2060'
				offset_start: 0
				offset_end:   18
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] DIGIT THREE (Numeric) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [6.0] DIGIT FOUR (Numeric) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0063\u2060\u002E\u2060\u0064\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0063\u2060\u002E\u2060\u0064\u2060\u2060'
				offset_start: 0
				offset_end:   18
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [8.0] LATIN SMALL LETTER D (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0043\u2060\u002E\u2060\u0064\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0043\u2060\u002E\u2060\u0064\u2060\u2060'
				offset_start: 0
				offset_end:   18
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN CAPITAL LETTER C (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [8.0] LATIN SMALL LETTER D (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0063\u2060\u002E\u2060\u0044\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0063\u2060\u002E\u2060\u0044\u2060\u2060'
				offset_start: 0
				offset_end:   18
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [7.0] LATIN CAPITAL LETTER D (Upper) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0043\u2060\u002E\u2060\u0044\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0043\u2060\u002E\u2060\u0044\u2060\u2060'
				offset_start: 0
				offset_end:   18
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN CAPITAL LETTER C (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [7.0] LATIN CAPITAL LETTER D (Upper) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060\u0074\u2060\u0068\u2060\u0065\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060\u0074\u2060\u0068\u2060\u0065\u2060\u2060'
				offset_start: 0
				offset_end:   49
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [8.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [8.0] RIGHT SINGLE QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [8.0] NO-BREAK SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [8.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER H (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060\u0054\u2060\u0068\u2060\u0065\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060'
				offset_start: 0
				offset_end:   34
			},
			SentenceBoundary{
				sentence:     '\u0054\u2060\u0068\u2060\u0065\u2060\u2060'
				offset_start: 34
				offset_end:   49
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] NO-BREAK SPACE (Sp) × [5.0] WORD JOINER (Format_FE) ÷ [11.0] LATIN CAPITAL LETTER T (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER H (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060\u2018\u2060\u0028\u2060\u0074\u2060\u0068\u2060\u0065\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060\u2018\u2060\u0028\u2060\u0074\u2060\u0068\u2060\u0065\u2060\u2060'
				offset_start: 0
				offset_end:   59
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [8.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [8.0] RIGHT SINGLE QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [8.0] NO-BREAK SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [8.0] LEFT SINGLE QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [998.0] LEFT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER H (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060\u2018\u2060\u0028\u2060\u0054\u2060\u0068\u2060\u0065\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060'
				offset_start: 0
				offset_end:   34
			},
			SentenceBoundary{
				sentence:     '\u2018\u2060\u0028\u2060\u0054\u2060\u0068\u2060\u0065\u2060\u2060'
				offset_start: 34
				offset_end:   59
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] NO-BREAK SPACE (Sp) × [5.0] WORD JOINER (Format_FE) ÷ [11.0] LEFT SINGLE QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [998.0] LEFT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN CAPITAL LETTER T (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER H (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060\u0308\u0074\u2060\u0068\u2060\u0065\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060\u0308\u0074\u2060\u0068\u2060\u0065\u2060\u2060'
				offset_start: 0
				offset_end:   51
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [8.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [8.0] RIGHT SINGLE QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [8.0] NO-BREAK SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [8.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER H (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060\u0308\u0054\u2060\u0068\u2060\u0065\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u00A0\u2060\u0308'
				offset_start: 0
				offset_end:   36
			},
			SentenceBoundary{
				sentence:     '\u0054\u2060\u0068\u2060\u0065\u2060\u2060'
				offset_start: 36
				offset_end:   51
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] NO-BREAK SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] LATIN CAPITAL LETTER T (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER H (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u0308\u0054\u2060\u0068\u2060\u0065\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u2019\u2060\u0308'
				offset_start: 0
				offset_end:   31
			},
			SentenceBoundary{
				sentence:     '\u0054\u2060\u0068\u2060\u0065\u2060\u2060'
				offset_start: 31
				offset_end:   46
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [5.0] WORD JOINER (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] LATIN CAPITAL LETTER T (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER H (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u000A\u2060\u0308\u2060\u0054\u2060\u0068\u2060\u0065\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u0029\u2060\u000A'
				offset_start: 0
				offset_end:   24
			},
			SentenceBoundary{
				sentence:     '\u2060\u0308\u2060\u0054\u2060\u0068\u2060\u0065\u2060\u2060'
				offset_start: 24
				offset_end:   47
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [9.0] RIGHT PARENTHESIS (Close) × [5.0] WORD JOINER (Format_FE) × [9.0] <LINE FEED (LF)> (LF) ÷ [4.0] WORD JOINER (Format_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN CAPITAL LETTER T (Upper) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER H (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0074\u2060\u0068\u2060\u0065\u2060\u0020\u2060\u0072\u2060\u0065\u2060\u0073\u2060\u0070\u2060\u002E\u2060\u0020\u2060\u006C\u2060\u0065\u2060\u0061\u2060\u0064\u2060\u0065\u2060\u0072\u2060\u0073\u2060\u0020\u2060\u0061\u2060\u0072\u2060\u0065\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0074\u2060\u0068\u2060\u0065\u2060\u0020\u2060\u0072\u2060\u0065\u2060\u0073\u2060\u0070\u2060\u002E\u2060\u0020\u2060\u006C\u2060\u0065\u2060\u0061\u2060\u0064\u2060\u0065\u2060\u0072\u2060\u0073\u2060\u0020\u2060\u0061\u2060\u0072\u2060\u0065\u2060\u2060'
				offset_start: 0
				offset_end:   90
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER H (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER R (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER S (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER P (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [8.0] SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [8.0] LATIN SMALL LETTER L (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER A (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER D (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER R (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER S (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER A (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER R (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u5B57\u2060\u002E\u2060\u5B57\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u5B57\u2060\u002E\u2060'
				offset_start: 0
				offset_end:   13
			},
			SentenceBoundary{
				sentence:     '\u5B57\u2060\u2060'
				offset_start: 13
				offset_end:   22
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] CJK UNIFIED IDEOGRAPH-5B57 (OLetter) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) ÷ [11.0] CJK UNIFIED IDEOGRAPH-5B57 (OLetter) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u5B83\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060'
				offset_start: 0
				offset_end:   19
			},
			SentenceBoundary{
				sentence:     '\u5B83\u2060\u2060'
				offset_start: 19
				offset_end:   28
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) ÷ [11.0] CJK UNIFIED IDEOGRAPH-5B83 (OLetter) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u3002\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0065\u2060\u0074\u2060\u0063\u2060\u002E\u2060\u3002\u2060\u2060'
				offset_start: 0
				offset_end:   28
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER E (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER T (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] LATIN SMALL LETTER C (Lower) × [5.0] WORD JOINER (Format_FE) × [998.0] FULL STOP (ATerm) × [5.0] WORD JOINER (Format_FE) × [8.1] IDEOGRAPHIC FULL STOP (STerm) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u5B57\u2060\u3002\u2060\u5B83\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u5B57\u2060\u3002\u2060'
				offset_start: 0
				offset_end:   15
			},
			SentenceBoundary{
				sentence:     '\u5B83\u2060\u2060'
				offset_start: 15
				offset_end:   24
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] CJK UNIFIED IDEOGRAPH-5B57 (OLetter) × [5.0] WORD JOINER (Format_FE) × [998.0] IDEOGRAPHIC FULL STOP (STerm) × [5.0] WORD JOINER (Format_FE) ÷ [11.0] CJK UNIFIED IDEOGRAPH-5B83 (OLetter) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
	TestCase{
		input:    '\u2060\u0021\u2060\u0020\u2060\u0020\u2060\u2060'
		expected: [
			SentenceBoundary{
				sentence:     '\u2060\u0021\u2060\u0020\u2060\u0020\u2060\u2060'
				offset_start: 0
				offset_end:   18
			},
		]
		desc:     '÷ [0.2] WORD JOINER (Format_FE) × [998.0] EXCLAMATION MARK (STerm) × [5.0] WORD JOINER (Format_FE) × [9.0] SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [10.0] SPACE (Sp) × [5.0] WORD JOINER (Format_FE) × [5.0] WORD JOINER (Format_FE) ÷ [0.3]'
	},
]
